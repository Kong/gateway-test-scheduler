{"version":3,"file":"index.js","mappings":";AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack/runtime/compat",".././src/actions.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","const core = require('@actions/core')\nconst fs = require('node:fs/promises')\nconst path = require('node:path')\nconst os = require('node:os')\n\nconst { downloadStatistics } = require('./download-statistics')\nconst { combineStatistics } = require('./combine-statistics')\nconst { schedule } = require('./schedule')\nconst { runner } = require('./runner')\n\nconst printEnv = () => {\n  for (const variable of [\n    'GITHUB_REPOSITORY',\n    'GITHUB_ACTOR',\n    'GITHUB_SHA',\n    'GITHUB_REF',\n    'GITHUB_EVENT_NAME',\n    'GITHUB_EVENT_PATH',\n    'GITHUB_WORKFLOW',\n    'GITHUB_RUN_ID',\n    'GITHUB_RUN_NUMBER',\n    'GITHUB_JOB',\n    'GITHUB_ACTION',\n    'GITHUB_EVENT_PATH',\n    'GITHUB_TOKEN',\n    'GIT_AUTHOR_NAME',\n    'GIT_AUTHOR_EMAIL',\n  ]) {\n    if (process.env[variable]) {\n      core.info(`${variable} => ${process.env[variable]}`)\n    }\n  }\n}\n\nmodule.exports = {\n  analyze: async () => {\n    const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/')\n    const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'analyze-runtimes-'))\n    core.info('download statistics files')\n    await downloadStatistics(\n      owner,\n      repo,\n      core.getInput('workflow-name', { required: true }),\n      core.getInput('artifact-name-regexp', { required: true }),\n      tmpDir,\n    )\n    core.info('combine statistics files')\n    const testFileRuntimeFile = core.getInput('test-file-runtime-file', {\n      required: true,\n    })\n    await combineStatistics(tmpDir, testFileRuntimeFile)\n    core.info('done')\n  },\n\n  schedule: async () => {\n    try {\n      await schedule(\n        core.getInput('test-suites-file', { required: true }),\n        core.getInput('test-file-runtime-file', { required: true }),\n        core.getInput('repo-root', { required: true }),\n        core.getInput('output-prefix', { required: true }),\n        parseInt(core.getInput('runner-count', { required: true }), 10),\n      )\n    } catch (e) {\n      core.setFailed(e.message)\n    }\n  },\n\n  runner: async () => {\n    try {\n      await runner(\n        core.getInput('tests-to-run-file', { required: true }),\n        core.getInput('failed-test-files-file', { required: true }),\n        core.getInput('test-file-runtime-file', { required: true }),\n        core.getInput('setup-venv', { required: true }),\n      )\n    } catch (e) {\n      core.setFailed(e.message)\n    }\n  },\n}\n"],"names":[],"sourceRoot":""}